generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  admin
  agent
  customer
}

enum TicketStatus {
  open
  in_progress
  closed
}

enum TicketPriority {
  low
  medium
  high
}

model Tenant {
  id         String    @id @default(uuid())
  name       String    @db.VarChar(255)
  createdAt  DateTime  @default(now())
  users      User[]
  departments Department[]
  tickets    Ticket[]
  slas       SLA[]
  workflows  Workflow[]
}

model User {
  id           String   @id @default(uuid())
  tenant       Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId     String
  username     String   @unique @db.VarChar(100)
  email        String   @unique @db.VarChar(255)
  passwordHash String   @db.VarChar(255)
  role         UserRole @default(customer)
  createdAt    DateTime @default(now())
  deletedAt    DateTime?
  refreshToken String?
  resetPasswordToken String?
  resetPasswordTokenExpiry DateTime?
  ticketsCreated Ticket[] @relation("TicketCreator")
  ticketsAssigned Ticket[] @relation("TicketAssignee")
  comments     TicketComment[]
}

model Department {
  id         String    @id @default(uuid())
  tenant     Tenant    @relation(fields: [tenantId], references: [id])
  tenantId   String
  name       String    @db.VarChar(100)
  tickets    Ticket[]
  createdAt  DateTime  @default(now())
}

model Ticket {
  id          String    @id @default(uuid())
  tenant      Tenant    @relation(fields: [tenantId], references: [id])
  tenantId    String
  title       String    @db.VarChar(255)
  description String?
  status      TicketStatus @default(open)
  priority    TicketPriority @default(medium)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime? 
  creator     User      @relation("TicketCreator", fields: [creatorId], references: [id])
  creatorId   String
  assignee    User?     @relation("TicketAssignee", fields: [assigneeId], references: [id])
  assigneeId  String?
  department  Department? @relation(fields: [departmentId], references: [id])
  departmentId String?
  comments    TicketComment[]
  attachments Attachment[]

  @@index([tenantId])
  @@index([status])
  @@index([priority])
  @@index([createdAt])
  @@index([deletedAt])
}

model TicketComment {
  id         String   @id @default(uuid())
  ticket     Ticket   @relation(fields: [ticketId], references: [id])
  ticketId   String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  comment    String
  createdAt  DateTime @default(now())
  attachments Attachment[]
}

model Attachment {
  id         String   @id @default(uuid())
  filePath   String   @db.VarChar(255)
  ticket     Ticket?  @relation(fields: [ticketId], references: [id])
  ticketId   String?
  comment    TicketComment? @relation(fields: [commentId], references: [id])
  commentId  String?
  uploadedAt DateTime @default(now())
}

model SLA {
  id           String   @id @default(uuid())
  tenant       Tenant   @relation(fields: [tenantId], references: [id])
  tenantId     String
  name         String   @db.VarChar(100)
  responseTime Int      @default(24) // hours
}

model Workflow {
  id          String   @id @default(uuid())
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  tenantId    String
  name        String   @db.VarChar(100)
  rules       Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([tenantId])
} 